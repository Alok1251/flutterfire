// Autogenerated from Pigeon (v9.2.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.firebase.auth;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidFirebaseAuth {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
          "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** The type of operation that generated the action code from calling [checkActionCode]. */
  public enum ActionCodeInfoOperation {
    /** Unknown operation. */
    UNKNOWN(0),
    /** Password reset code generated via [sendPasswordResetEmail]. */
    PASSWORD_RESET(1),
    /** Email verification code generated via [User.sendEmailVerification]. */
    VERIFY_EMAIL(2),
    /** Email change revocation code generated via [User.updateEmail]. */
    RECOVER_EMAIL(3),
    /** Email sign in code generated via [sendSignInLinkToEmail]. */
    EMAIL_SIGN_IN(4),
    /** Verify and change email code generated via [User.verifyBeforeUpdateEmail]. */
    VERIFY_AND_CHANGE_EMAIL(5),
    /** Action code for reverting second factor addition. */
    REVERT_SECOND_FACTOR_ADDITION(6);

    final int index;

    private ActionCodeInfoOperation(final int index) {
      this.index = index;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonMultiFactorSession {
    private @NonNull String id;

    public @NonNull String getId() {
      return id;
    }

    public void setId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"id\" is null.");
      }
      this.id = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonMultiFactorSession() {}

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@NonNull String setterArg) {
        this.id = setterArg;
        return this;
      }

      public @NonNull PigeonMultiFactorSession build() {
        PigeonMultiFactorSession pigeonReturn = new PigeonMultiFactorSession();
        pigeonReturn.setId(id);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(id);
      return toListResult;
    }

    static @NonNull PigeonMultiFactorSession fromList(@NonNull ArrayList<Object> list) {
      PigeonMultiFactorSession pigeonResult = new PigeonMultiFactorSession();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonPhoneMultiFactorAssertion {
    private @NonNull String verificationId;

    public @NonNull String getVerificationId() {
      return verificationId;
    }

    public void setVerificationId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationId\" is null.");
      }
      this.verificationId = setterArg;
    }

    private @NonNull String verificationCode;

    public @NonNull String getVerificationCode() {
      return verificationCode;
    }

    public void setVerificationCode(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"verificationCode\" is null.");
      }
      this.verificationCode = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonPhoneMultiFactorAssertion() {}

    public static final class Builder {

      private @Nullable String verificationId;

      public @NonNull Builder setVerificationId(@NonNull String setterArg) {
        this.verificationId = setterArg;
        return this;
      }

      private @Nullable String verificationCode;

      public @NonNull Builder setVerificationCode(@NonNull String setterArg) {
        this.verificationCode = setterArg;
        return this;
      }

      public @NonNull PigeonPhoneMultiFactorAssertion build() {
        PigeonPhoneMultiFactorAssertion pigeonReturn = new PigeonPhoneMultiFactorAssertion();
        pigeonReturn.setVerificationId(verificationId);
        pigeonReturn.setVerificationCode(verificationCode);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(verificationId);
      toListResult.add(verificationCode);
      return toListResult;
    }

    static @NonNull PigeonPhoneMultiFactorAssertion fromList(@NonNull ArrayList<Object> list) {
      PigeonPhoneMultiFactorAssertion pigeonResult = new PigeonPhoneMultiFactorAssertion();
      Object verificationId = list.get(0);
      pigeonResult.setVerificationId((String) verificationId);
      Object verificationCode = list.get(1);
      pigeonResult.setVerificationCode((String) verificationCode);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonMultiFactorInfo {
    private @Nullable String displayName;

    public @Nullable String getDisplayName() {
      return displayName;
    }

    public void setDisplayName(@Nullable String setterArg) {
      this.displayName = setterArg;
    }

    private @NonNull Double enrollmentTimestamp;

    public @NonNull Double getEnrollmentTimestamp() {
      return enrollmentTimestamp;
    }

    public void setEnrollmentTimestamp(@NonNull Double setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"enrollmentTimestamp\" is null.");
      }
      this.enrollmentTimestamp = setterArg;
    }

    private @Nullable String factorId;

    public @Nullable String getFactorId() {
      return factorId;
    }

    public void setFactorId(@Nullable String setterArg) {
      this.factorId = setterArg;
    }

    private @NonNull String uid;

    public @NonNull String getUid() {
      return uid;
    }

    public void setUid(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"uid\" is null.");
      }
      this.uid = setterArg;
    }

    private @Nullable String phoneNumber;

    public @Nullable String getPhoneNumber() {
      return phoneNumber;
    }

    public void setPhoneNumber(@Nullable String setterArg) {
      this.phoneNumber = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonMultiFactorInfo() {}

    public static final class Builder {

      private @Nullable String displayName;

      public @NonNull Builder setDisplayName(@Nullable String setterArg) {
        this.displayName = setterArg;
        return this;
      }

      private @Nullable Double enrollmentTimestamp;

      public @NonNull Builder setEnrollmentTimestamp(@NonNull Double setterArg) {
        this.enrollmentTimestamp = setterArg;
        return this;
      }

      private @Nullable String factorId;

      public @NonNull Builder setFactorId(@Nullable String setterArg) {
        this.factorId = setterArg;
        return this;
      }

      private @Nullable String uid;

      public @NonNull Builder setUid(@NonNull String setterArg) {
        this.uid = setterArg;
        return this;
      }

      private @Nullable String phoneNumber;

      public @NonNull Builder setPhoneNumber(@Nullable String setterArg) {
        this.phoneNumber = setterArg;
        return this;
      }

      public @NonNull PigeonMultiFactorInfo build() {
        PigeonMultiFactorInfo pigeonReturn = new PigeonMultiFactorInfo();
        pigeonReturn.setDisplayName(displayName);
        pigeonReturn.setEnrollmentTimestamp(enrollmentTimestamp);
        pigeonReturn.setFactorId(factorId);
        pigeonReturn.setUid(uid);
        pigeonReturn.setPhoneNumber(phoneNumber);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(displayName);
      toListResult.add(enrollmentTimestamp);
      toListResult.add(factorId);
      toListResult.add(uid);
      toListResult.add(phoneNumber);
      return toListResult;
    }

    static @NonNull PigeonMultiFactorInfo fromList(@NonNull ArrayList<Object> list) {
      PigeonMultiFactorInfo pigeonResult = new PigeonMultiFactorInfo();
      Object displayName = list.get(0);
      pigeonResult.setDisplayName((String) displayName);
      Object enrollmentTimestamp = list.get(1);
      pigeonResult.setEnrollmentTimestamp((Double) enrollmentTimestamp);
      Object factorId = list.get(2);
      pigeonResult.setFactorId((String) factorId);
      Object uid = list.get(3);
      pigeonResult.setUid((String) uid);
      Object phoneNumber = list.get(4);
      pigeonResult.setPhoneNumber((String) phoneNumber);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonFirebaseApp {
    private @NonNull String appName;

    public @NonNull String getAppName() {
      return appName;
    }

    public void setAppName(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"appName\" is null.");
      }
      this.appName = setterArg;
    }

    private @Nullable String tenantId;

    public @Nullable String getTenantId() {
      return tenantId;
    }

    public void setTenantId(@Nullable String setterArg) {
      this.tenantId = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonFirebaseApp() {}

    public static final class Builder {

      private @Nullable String appName;

      public @NonNull Builder setAppName(@NonNull String setterArg) {
        this.appName = setterArg;
        return this;
      }

      private @Nullable String tenantId;

      public @NonNull Builder setTenantId(@Nullable String setterArg) {
        this.tenantId = setterArg;
        return this;
      }

      public @NonNull PigeonFirebaseApp build() {
        PigeonFirebaseApp pigeonReturn = new PigeonFirebaseApp();
        pigeonReturn.setAppName(appName);
        pigeonReturn.setTenantId(tenantId);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(appName);
      toListResult.add(tenantId);
      return toListResult;
    }

    static @NonNull PigeonFirebaseApp fromList(@NonNull ArrayList<Object> list) {
      PigeonFirebaseApp pigeonResult = new PigeonFirebaseApp();
      Object appName = list.get(0);
      pigeonResult.setAppName((String) appName);
      Object tenantId = list.get(1);
      pigeonResult.setTenantId((String) tenantId);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonActionCodeInfo {
    private @NonNull ActionCodeInfoOperation operation;

    public @NonNull ActionCodeInfoOperation getOperation() {
      return operation;
    }

    public void setOperation(@NonNull ActionCodeInfoOperation setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"operation\" is null.");
      }
      this.operation = setterArg;
    }

    private @NonNull PigeonActionCodeInfoData data;

    public @NonNull PigeonActionCodeInfoData getData() {
      return data;
    }

    public void setData(@NonNull PigeonActionCodeInfoData setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    PigeonActionCodeInfo() {}

    public static final class Builder {

      private @Nullable ActionCodeInfoOperation operation;

      public @NonNull Builder setOperation(@NonNull ActionCodeInfoOperation setterArg) {
        this.operation = setterArg;
        return this;
      }

      private @Nullable PigeonActionCodeInfoData data;

      public @NonNull Builder setData(@NonNull PigeonActionCodeInfoData setterArg) {
        this.data = setterArg;
        return this;
      }

      public @NonNull PigeonActionCodeInfo build() {
        PigeonActionCodeInfo pigeonReturn = new PigeonActionCodeInfo();
        pigeonReturn.setOperation(operation);
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(operation == null ? null : operation.index);
      toListResult.add((data == null) ? null : data.toList());
      return toListResult;
    }

    static @NonNull PigeonActionCodeInfo fromList(@NonNull ArrayList<Object> list) {
      PigeonActionCodeInfo pigeonResult = new PigeonActionCodeInfo();
      Object operation = list.get(0);
      pigeonResult.setOperation(
          operation == null ? null : ActionCodeInfoOperation.values()[(int) operation]);
      Object data = list.get(1);
      pigeonResult.setData(
          (data == null) ? null : PigeonActionCodeInfoData.fromList((ArrayList<Object>) data));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class PigeonActionCodeInfoData {
    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable String previousEmail;

    public @Nullable String getPreviousEmail() {
      return previousEmail;
    }

    public void setPreviousEmail(@Nullable String setterArg) {
      this.previousEmail = setterArg;
    }

    public static final class Builder {

      private @Nullable String email;

      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable String previousEmail;

      public @NonNull Builder setPreviousEmail(@Nullable String setterArg) {
        this.previousEmail = setterArg;
        return this;
      }

      public @NonNull PigeonActionCodeInfoData build() {
        PigeonActionCodeInfoData pigeonReturn = new PigeonActionCodeInfoData();
        pigeonReturn.setEmail(email);
        pigeonReturn.setPreviousEmail(previousEmail);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(email);
      toListResult.add(previousEmail);
      return toListResult;
    }

    static @NonNull PigeonActionCodeInfoData fromList(@NonNull ArrayList<Object> list) {
      PigeonActionCodeInfoData pigeonResult = new PigeonActionCodeInfoData();
      Object email = list.get(0);
      pigeonResult.setEmail((String) email);
      Object previousEmail = list.get(1);
      pigeonResult.setPreviousEmail((String) previousEmail);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    @SuppressWarnings("UnknownNullness")
    void success(T result);

    void error(@NonNull Throwable error);
  }

  private static class FirebaseAuthHostApiCodec extends StandardMessageCodec {
    public static final FirebaseAuthHostApiCodec INSTANCE = new FirebaseAuthHostApiCodec();

    private FirebaseAuthHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonActionCodeInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonActionCodeInfoData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonActionCodeInfo) {
        stream.write(128);
        writeValue(stream, ((PigeonActionCodeInfo) value).toList());
      } else if (value instanceof PigeonActionCodeInfoData) {
        stream.write(129);
        writeValue(stream, ((PigeonActionCodeInfoData) value).toList());
      } else if (value instanceof PigeonFirebaseApp) {
        stream.write(130);
        writeValue(stream, ((PigeonFirebaseApp) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface FirebaseAuthHostApi {

    void registerIdTokenListener(@NonNull PigeonFirebaseApp app, @NonNull Result<String> result);

    void registerAuthStateListener(@NonNull PigeonFirebaseApp app, @NonNull Result<String> result);

    void useEmulator(
        @NonNull PigeonFirebaseApp app,
        @NonNull String host,
        @NonNull Long port,
        @NonNull Result<Void> result);

    void applyActionCode(
        @NonNull PigeonFirebaseApp app, @NonNull String code, @NonNull Result<Void> result);

    void checkActionCode(
        @NonNull PigeonFirebaseApp app,
        @NonNull String code,
        @NonNull Result<PigeonActionCodeInfo> result);

    void confirmPasswordReset(
        @NonNull PigeonFirebaseApp app,
        @NonNull String code,
        @NonNull String newPassword,
        @NonNull Result<Void> result);

    /** The codec used by FirebaseAuthHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FirebaseAuthHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `FirebaseAuthHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable FirebaseAuthHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.FirebaseAuthHostApi.registerIdTokenListener",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.registerIdTokenListener(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.FirebaseAuthHostApi.registerAuthStateListener",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                Result<String> resultCallback =
                    new Result<String>() {
                      public void success(String result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.registerAuthStateListener(appArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.FirebaseAuthHostApi.useEmulator", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String hostArg = (String) args.get(1);
                Number portArg = (Number) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.useEmulator(
                    appArg,
                    hostArg,
                    (portArg == null) ? null : portArg.longValue(),
                    resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.FirebaseAuthHostApi.applyActionCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.applyActionCode(appArg, codeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.FirebaseAuthHostApi.checkActionCode",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                Result<PigeonActionCodeInfo> resultCallback =
                    new Result<PigeonActionCodeInfo>() {
                      public void success(PigeonActionCodeInfo result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.checkActionCode(appArg, codeArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.FirebaseAuthHostApi.confirmPasswordReset",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonFirebaseApp appArg = (PigeonFirebaseApp) args.get(0);
                String codeArg = (String) args.get(1);
                String newPasswordArg = (String) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.confirmPasswordReset(appArg, codeArg, newPasswordArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MultiFactorUserHostApiCodec extends StandardMessageCodec {
    public static final MultiFactorUserHostApiCodec INSTANCE = new MultiFactorUserHostApiCodec();

    private MultiFactorUserHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonMultiFactorSession.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonPhoneMultiFactorAssertion.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonMultiFactorInfo) {
        stream.write(128);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else if (value instanceof PigeonMultiFactorSession) {
        stream.write(129);
        writeValue(stream, ((PigeonMultiFactorSession) value).toList());
      } else if (value instanceof PigeonPhoneMultiFactorAssertion) {
        stream.write(130);
        writeValue(stream, ((PigeonPhoneMultiFactorAssertion) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MultiFactorUserHostApi {

    void enrollPhone(
        @NonNull String appName,
        @NonNull PigeonPhoneMultiFactorAssertion assertion,
        @Nullable String displayName,
        @NonNull Result<Void> result);

    void getSession(@NonNull String appName, @NonNull Result<PigeonMultiFactorSession> result);

    void unenroll(
        @NonNull String appName, @Nullable String factorUid, @NonNull Result<Void> result);

    void getEnrolledFactors(
        @NonNull String appName, @NonNull Result<List<PigeonMultiFactorInfo>> result);

    /** The codec used by MultiFactorUserHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MultiFactorUserHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MultiFactorUserHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable MultiFactorUserHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.MultiFactorUserHostApi.enrollPhone",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appNameArg = (String) args.get(0);
                PigeonPhoneMultiFactorAssertion assertionArg =
                    (PigeonPhoneMultiFactorAssertion) args.get(1);
                String displayNameArg = (String) args.get(2);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.enrollPhone(appNameArg, assertionArg, displayNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.MultiFactorUserHostApi.getSession",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appNameArg = (String) args.get(0);
                Result<PigeonMultiFactorSession> resultCallback =
                    new Result<PigeonMultiFactorSession>() {
                      public void success(PigeonMultiFactorSession result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getSession(appNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.MultiFactorUserHostApi.unenroll", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appNameArg = (String) args.get(0);
                String factorUidArg = (String) args.get(1);
                Result<Void> resultCallback =
                    new Result<Void>() {
                      public void success(Void result) {
                        wrapped.add(0, null);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.unenroll(appNameArg, factorUidArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.MultiFactorUserHostApi.getEnrolledFactors",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String appNameArg = (String) args.get(0);
                Result<List<PigeonMultiFactorInfo>> resultCallback =
                    new Result<List<PigeonMultiFactorInfo>>() {
                      public void success(List<PigeonMultiFactorInfo> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.getEnrolledFactors(appNameArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class MultiFactoResolverHostApiCodec extends StandardMessageCodec {
    public static final MultiFactoResolverHostApiCodec INSTANCE =
        new MultiFactoResolverHostApiCodec();

    private MultiFactoResolverHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonActionCodeInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return PigeonActionCodeInfoData.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return PigeonFirebaseApp.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return PigeonMultiFactorSession.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return PigeonPhoneMultiFactorAssertion.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonActionCodeInfo) {
        stream.write(128);
        writeValue(stream, ((PigeonActionCodeInfo) value).toList());
      } else if (value instanceof PigeonActionCodeInfoData) {
        stream.write(129);
        writeValue(stream, ((PigeonActionCodeInfoData) value).toList());
      } else if (value instanceof PigeonFirebaseApp) {
        stream.write(130);
        writeValue(stream, ((PigeonFirebaseApp) value).toList());
      } else if (value instanceof PigeonMultiFactorInfo) {
        stream.write(131);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else if (value instanceof PigeonMultiFactorSession) {
        stream.write(132);
        writeValue(stream, ((PigeonMultiFactorSession) value).toList());
      } else if (value instanceof PigeonPhoneMultiFactorAssertion) {
        stream.write(133);
        writeValue(stream, ((PigeonPhoneMultiFactorAssertion) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface MultiFactoResolverHostApi {

    void resolveSignIn(
        @NonNull String resolverId,
        @NonNull PigeonPhoneMultiFactorAssertion assertion,
        @NonNull Result<Map<String, Object>> result);

    /** The codec used by MultiFactoResolverHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return MultiFactoResolverHostApiCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `MultiFactoResolverHostApi` to handle messages through the
     * `binaryMessenger`.
     */
    static void setup(
        @NonNull BinaryMessenger binaryMessenger, @Nullable MultiFactoResolverHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.MultiFactoResolverHostApi.resolveSignIn",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String resolverIdArg = (String) args.get(0);
                PigeonPhoneMultiFactorAssertion assertionArg =
                    (PigeonPhoneMultiFactorAssertion) args.get(1);
                Result<Map<String, Object>> resultCallback =
                    new Result<Map<String, Object>>() {
                      public void success(Map<String, Object> result) {
                        wrapped.add(0, result);
                        reply.reply(wrapped);
                      }

                      public void error(Throwable error) {
                        ArrayList<Object> wrappedError = wrapError(error);
                        reply.reply(wrappedError);
                      }
                    };

                api.resolveSignIn(resolverIdArg, assertionArg, resultCallback);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class GenerateInterfacesCodec extends StandardMessageCodec {
    public static final GenerateInterfacesCodec INSTANCE = new GenerateInterfacesCodec();

    private GenerateInterfacesCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return PigeonMultiFactorInfo.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof PigeonMultiFactorInfo) {
        stream.write(128);
        writeValue(stream, ((PigeonMultiFactorInfo) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * Only used to generate the object interface that are use outside of the Pigeon interface
   *
   * <p>Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface GenerateInterfaces {

    void generateInterfaces(@NonNull PigeonMultiFactorInfo info);

    /** The codec used by GenerateInterfaces. */
    static @NonNull MessageCodec<Object> getCodec() {
      return GenerateInterfacesCodec.INSTANCE;
    }
    /**
     * Sets up an instance of `GenerateInterfaces` to handle messages through the `binaryMessenger`.
     */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable GenerateInterfaces api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger,
                "dev.flutter.pigeon.GenerateInterfaces.generateInterfaces",
                getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                PigeonMultiFactorInfo infoArg = (PigeonMultiFactorInfo) args.get(0);
                try {
                  api.generateInterfaces(infoArg);
                  wrapped.add(0, null);
                } catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
